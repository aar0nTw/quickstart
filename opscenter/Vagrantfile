$script = <<SCRIPT
[Unit]
    Description=Set Up Default Routes
    After=network.target

[Service]
    Type=oneshot
    ExecStart=-/sbin/ip route add 10.100.0.0/16 dev eth1

[Install]
    WantedBy=multi-user.target
SCRIPT

Vagrant.configure(2) do |config|
  # create a new volume (vdi file)
  def attach_media(vb, controller_name, device, sizeMB, port)
    vdi_file = vb.name + device + ".vdi"
    unless File.exist?(vdi_file)
       vb.customize ["createhd", "--filename", vdi_file, "--size", sizeMB * 1024]
    end
    vb.customize ["storageattach", :id, "--storagectl", controller_name, "--port", port,
                  "--device", 0, "--type", "hdd", "--medium", vdi_file]
  end

  def create_node(vm, node_name, cpus, ram_mb, private_ip)
    vm.define node_name do |node|
      node.vm.hostname = node_name
      node.vm.network "private_network",
          :ip => "#{private_ip}",
          :libvirt__forward_mode => 'none'
      node.vm.provider :libvirt do |vb|
        vb.cpus = cpus
        vb.memory = ram_mb
        vb.storage :file, :size => '10G', :type => 'raw', :device => "vdb"
        vb.storage :file, :size => '10G', :type => 'raw', :device => "vdc"
      end
      node.vm.provider "virtualbox" do |vb|
        vb.name = node.vm.hostname
        vb.cpus = cpus
        vb.memory = ram_mb
        attach_media(vb, "SATA Controller", "sdb", 10, 1) # 10Gb, /var/lib/gravity
        attach_media(vb, "SATA Controller", "sdc", 10, 2) # 10Gb for docker
      end
    end
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  # fix grub to turn on memory cgroup
  config.vm.provision "shell", args: [$script], inline: <<-SHELL
    echo -e "$1" > /lib/systemd/system/kube-routes.service
    systemctl enable kube-routes.service
    systemctl start kube-routes.service
    yum -y install net-tools
  SHELL

  cpus = ENV['VAGRANT_NODE_CPUS'] || 1
  ram = ENV['VAGRANT_NODE_RAM'] || 3000

  create_node(config.vm, "node-1", cpus, ram, "172.28.128.3")
end
